package com.blogspot.jesfre.bibletrivia.domain;

import static com.blogspot.jesfre.bibletrivia.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class QuizAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuizAllPropertiesEquals(Quiz expected, Quiz actual) {
        assertQuizAutoGeneratedPropertiesEquals(expected, actual);
        assertQuizAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuizAllUpdatablePropertiesEquals(Quiz expected, Quiz actual) {
        assertQuizUpdatableFieldsEquals(expected, actual);
        assertQuizUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuizAutoGeneratedPropertiesEquals(Quiz expected, Quiz actual) {
        assertThat(expected)
            .as("Verify Quiz auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuizUpdatableFieldsEquals(Quiz expected, Quiz actual) {
        assertThat(expected)
            .as("Verify Quiz relevant properties")
            .satisfies(e -> assertThat(e.getQuizTaker()).as("check quizTaker").isEqualTo(actual.getQuizTaker()))
            .satisfies(e ->
                assertThat(e.getStartDate())
                    .as("check startDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getStartDate())
            )
            .satisfies(e -> assertThat(e.getTotalQuestions()).as("check totalQuestions").isEqualTo(actual.getTotalQuestions()))
            .satisfies(e -> assertThat(e.getCorrectQuestions()).as("check correctQuestions").isEqualTo(actual.getCorrectQuestions()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuizUpdatableRelationshipsEquals(Quiz expected, Quiz actual) {
        // empty method
    }
}
